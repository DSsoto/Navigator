
<!--
        This file launches all nodes necessary for navigation.
        Nodes launched:
            * thruster mapper
            * pose_controller
            * sdgps_solution_ros_bridge
            * wrench_arbiter
            * joystick_wrench
            * joy_node
            * ins_tf
            * lidar_tf
            * forward_camera_tf

        It takes in twp parameters
        * 'sim' to launch only certain nodes.
        * 'rc' to decide whether to launch the xbox remote control nodes

        Nodes affected by the 'sim' arg:
            * sdgps_solution_ros_bridge

        Nodes affected by the 'rc' arg:
            * joystick_wrench
            * joy_node

-->

<launch>

    <arg name="sim" default="true" />
    <arg name="rc" default="true" />

    <node pkg="navigator_thrust_mapper" type="thrust_mapper.py" name="thrust_mapper">
    <!-- Parameters used to set the thruster locations and angles relative to the center of gravity of the boat -->
        <rosparam param="thruster_BL_cog">[-1.9304, 1.016]</rosparam>
        <rosparam param="thruster_BR_cog">[-1.9304, -1.016]</rosparam>
        <rosparam param="thruster_FL_cog">[1.5748, 0.6096]</rosparam>
        <rosparam param="thruster_FR_cog">[1.5748, -0.6096]</rosparam>
        <rosparam param="thruster_BL_theta">45</rosparam>
        <rosparam param="thruster_BR_theta">-45</rosparam>
        <rosparam param="thruster_FL_theta">-45</rosparam>
        <rosparam param="thruster_FR_theta">45</rosparam>
        <rosparam param="effort_ratio">2.7</rosparam><!-- map 220 newtons to 600 effort units -->
        <rosparam param="effort_limit">600</rosparam>
    </node>

    <node name="wrench_arbiter" pkg="navigator_msg_multiplexer" type="wrench_arbiter.py"/>

    <node name="pose_controller" pkg="navigator_controller" type="mrac_controller.py">
        <!-- All paramters are given as (x,y,z) for euler and (x,y,z,w) for quaternion -->
        <rosparam param="p_gains_body">[1000, 1000, 5600]</rosparam>
        <rosparam param="d_gains_body">[1200, 1200, 6000]</rosparam>
        <rosparam param="i_gains_body">[0.1, 0.1, 0.1]</rosparam>
        <rosparam param="drag_adapt_rates">5</rosparam>
        <rosparam param="disturbance_estimate">[0, 0, 0]</rosparam>
        <rosparam param="drag_estimate">-[0, 0, 0, 0, 0]</rosparam>
        <rosparam param="disturbance_limits">-[200, 200, 200]</rosparam>
        <rosparam param="drag_limit">[1000, 1000, 1000]</rosparam>
        <rosparam param="max_positive_velocity">[1.1,  0.45, 0.19]</rosparam><!-- map 220 newtons to 300 effort units -->
        <rosparam param="max_negative_velocity">[0.68, 0.45, 0.19]</rosparam>
        <rosparam param="heading_threshold">500</rosparam>
        <rosparam param="PD_only">False</rosparam>
        <rosparam param="external_tgen">True</rosparam>
        <rosparam param="mass_reference">400</rosparam>
        <rosparam param="inertia_reference">400</rosparam>
        <rosparam param="max_thrust">220</rosparam>
    </node>

    <!-- can be type="mrac_controller.py" OR type="run_nn_controller" if you have that dependency
    <https://github.com/jnez71/neural_control>-->

    <node if="$(arg rc)" pkg="navigator_joystick_control" type="navigator_joystick.py" name="joystick_wrench">
        <param name="force_scale" value="600" type="double"/>
        <param name="torque_scale" value="500" type="double"/>
    </node>

    <node if="$(arg rc)" respawn="true" pkg="xbox_joy_node" type="joy_node" name="joy_node">
        <param name="dev" type="string" value="/dev/input/by-id/usb-045e_0291-joystick" />
        <param name="deadzone" value="0.12" />
        <param name="autorepeat_rate" value="5"/>
    </node>

    <node pkg="tf" type="static_transform_publisher" name="ins_tf" args=".37084 .0.05715 .7493  0 0 0 1  /base_link /ins 100"/>
    <node pkg="tf" type="static_transform_publisher" name="lidar_tf" args=".5334 0.0127 .7493  0 0 0 1  /base_link /lidar 100" />
    <node pkg="tf" type="static_transform_publisher" name="forward_camera_tf" args=".6096 -.254 .762  0 0 0 1  /base_link /camera 100" />

    <node name="move_helper" pkg="navigator_tools" type="move_helper.py"/>

    <node pkg="kill_handling" type="kill_master" name="kill_master"/>
  <node pkg="c3_trajectory_generator" type="c3_trajectory_generator" name="c3_trajectory_generator" output="screen">
    <rosparam>
        <!-- Degraded trajectory -->
        fixed_frame: /enu
        body_frame: /base_link
        vmin_b: [-0.68, -0.45, -1, -1, -1, -0.19]
        vmax_b: [  1.1,  0.45,  1,  1,  1,  0.19]
        amin_b: [-0.34, -0.15, -1, -1, -1, -0.04]
        amax_b: [ 0.53,  0.15,  1,  1,  1,  0.04]
        arevoffset_b: [0.0, 0, 0]
        umax_b: [1, 1, 1, 1, 1, 1]
      </rosparam>
    </node>


</launch>
